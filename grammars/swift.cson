'scopeName': 'source.swift'
'fileTypes': [
  'swift'
],
'name': 'Swift'
'patterns': [
  {
    'name': 'keyword.declaration.swift'
    'match': '\\b(class|deinit|enum|extension|final|func|import|init|internal|let|private|protocol|public|static|struct|subscript|typealias|var)\\b'
  }
  {
    'name': 'keyword.statement.swift'
    'match': '\\b(break|case|continue|default|do|else|fallthrough|if|in|for|return|switch|where|while)\\b'
  }
  {
    'name': 'keyword.expressions-and-types.swift'
    'match': '\\b(as|dynamicType|is|new|super|self|Self|Type|__COLUMN__|__FILE__|__FUNCTION__|__LINE__)\\b'
  }
  {
    'name': 'keyword.reserved.swift'
    'match': '\\b(associativity|didSet|get|infix|inout|left|mutating|none|nonmutating|operator|override|postfix|precedence|prefix|right|set|unowned|unowned\(safe\)|unowned\(unsafe\)|weak|willSet)\\b'
  }
  {
    'include': '#comment'
  }
]
'repository':
  'comment':
    'patterns': [
      {
        'begin': '/\\*'
        'captures':
          '0':
            'name': 'punctuation.definition.comment.swift'
        'end': '\\*/'
        'name': 'comment.block.swift'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.swift'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.swift'
            'end': '\\n'
            'name': 'comment.line.double-slash.swift'
            'patterns': [
              {
                'match': '(?>\\\\\\s*\\n)'
                'name': 'punctuation.separator.continuation.swift'
              }
            ]
          }
        ]
      }
    ]
  'escaped-char':
    'patterns': [
      {
        'name': 'constant.character.escape.swift'
        'match': '\\\\[0\\\\tnr"\']'
      }
      {
        'name': 'constant.character.escape.swift'
        'match': '\\\\(x\\h{2}|u\\h{4}|U\\h{8})'
      }
      {
        'name': 'invalid.illegal.constant.character.escape.swift'
        'match': '\\\\[^uxU]'
      }
    ]
  'identifier':
    'match':
      '(?x)
            (?<identifier>                \\g<identifier-head> \\g<identifier-characters>?
              |                         ` \\g<identifier-head> \\g<identifier-characters>? `
              ){0}
            (?<identifier-head>           [ a-z A-Z ]
              |                           [ \\xC2\\xA8 \\xC2\\xAA \\xC2\\xAD \\xC2\\xAF \\xC2\\xB2-\\xC2\\xB5 \\xC2\\xB7-\\xC2\\xBa ]
              |                           [ \\xC2\\xBC-\\xC2\\xBE \\xC2\\xC0-\\xC2\\xD6 \\xC2\\xD8-\\xC2\\xF6 \\xC2\\xF8-\\xC2\\xFF ]
              |                           [ \\xC4\\x80-\\xCB\\xBF \\xCD\\xB0-\\xE1\\x99\\xBF \\xE1\\x9A\\x81-\\xE1\\xA0\\x8D \\xE1\\xA0\\x8F-\\xE1\\xB6\\xBF ]
              |                           [ \\xE1\\xB8\\x80-\\xE1\\xBF\\xBF ]
              |                           [ \\xE2\\x80\\x8B-\\xE2\\x80\\x8D \\xE2\\x80\\xAA-\\xE2\\x80\\xAE \\xE2\\x80\\xBF-\\xE2\\x81\\x80 \\xE2\\x81\\x94 \\xE2\\x81\\xA0-\\xE2\\x81\\xAF ]
              |                           [ \\xE2\\x81\\xB0-\\xE2\\x83\\x8F \\xE2\\x84\\x80-\\xE2\\x86\\x8F \\xE2\\x91\\xA0-\\xE2\\x93\\xBF \\xE2\\x9D\\xB6-\\xE2\\x9E\\x93 ]
              |                           [ \\xE2\\xB0\\x80-\\xE2\\xB7\\xBF \\xE2\\xBA\\x80-\\xE2\\xBF\\xBF ]
              |                           [ \\xE3\\x80\\x84-\\xE3\\x80\\x87 \\xE3\\x80\\xA1-\\xE3\\x80\\xAF \\xE3\\x80\\xB1-\\xE3\\x80\\xBF \\xE3\\x81\\x80-\\xED\\x9F\\xBF ]
              |                           [ \\xEF\\xA4\\x80-\\xEF\\xB4\\xBD \\xEF\\xB5\\x80-\\xEF\\xB7\\x8F \\xEF\\xB7\\xB0-\\xEF\\xB8\\x9F \\xEF\\xB8\\xB0-\\xEF\\xB9\\x84 ]
              |                           [ \\xEF\\xB9\\x87-\\xEF\\xBF\\xBD ]
              |                           [ \\xF0\\x90\\x80\\x80-\\xF0\\x9F\\xBF\\xBD \\xF0\\xA0\\x80\\x80-\\xF0\\xAF\\xBF\\xBD \\xF0\\xB0\\x80\\x80-\\xF0\\xBF\\xBF\\xBD \\xF1\\x80\\x80\\x80-\\xF1\\x8F\\xBF\\xBD ]
              |                           [ \\xF1\\x90\\x80\\x80-\\xF1\\x9F\\xBF\\xBD \\xF1\\xA0\\x80\\x80-\\xF1\\xAF\\xBF\\xBD \\xF1\\xB0\\x80\\x80-\\xF1\\xBF\\xBF\\xBD \\xF2\\x80\\x80\\x80-\\xF2\\x8F\\xBF\\xBD ]
              |                           [ \\xF2\\x90\\x80\\x80-\\xF2\\x9F\\xBF\\xBD \\xF2\\xA0\\x80\\x80-\\xF2\\xAF\\xBF\\xBD \\xF2\\xB0\\x80\\x80-\\xF2\\xBF\\xBF\\xBD \\xF3\\x80\\x80\\x80-\\xF3\\x8F\\xBF\\xBD ]
              |                           [ \\xF3\\x90\\x80\\x80-\\xF3\\x9F\\xBF\\xBD \\xF3\\xA0\\x80\\x80-\\xF3\\xAF\\xBF\\xBD ]
              ){0}
            (?<identifier-character>      \\d
              |                           [ \\xCC\\x80-\\xCD\\xAF \\xE1\\xB7\\x80-\\xE1\\xB7\\xBF \\xE2\\x83\\x90-\\xE2\\x83\\xBF \\xEF\\xB8\\xA0-\\xEF\\xB8\\xAF ]
              |                           \\g<identifier-head>
              ){0}
            (?<identifier-characters>     \\g<identifier-character> \\g<identifier-characters>?
              ){0}
            (?<implicit-parameter-name>   (?<!\\g<identifier-head>) \\$ \\d+ (?!\\g<identifier-head>) (?# FIXME)
              ){0}
          \\g<identifier>
        | \\g<implicit-parameter-name>
      '
    'captures':
      '5': #can't seem to use named captures here
          'name': 'variable.other.positional.swift'
  'literal':
    'patterns': [
      {
        'include': '#literal-number'
      }
      {
        'include': '#literal-string'
      }
    ]
  'literal-number':
    'name': 'constant.numeric.swift'
    'match':
      '(?x)
            (?### INTEGER ###)
            (?<integer-literal>                 \\g<binary-literal>
              |                                 \\g<octal-literal>
              |                                 \\g<hexadecimal-literal>
              |                                 \\g<decimal-literal>
              ){0}
            (?### BINARY ###)
            (?<binary-literal>                  0b \\g<binary-digit> \\g<binary-literal-characters>?
              ){0}
            (?<binary-digit>                    [0-1]
              ){0}
            (?<binary-literal-character>        \\g<binary-digit>
              |                                 _
              ){0}
            (?<binary-literal-characters>       \\g<binary-literal-character> \\g<binary-literal-characters>?
              ){0}

            (?### OCTAL ###)
            (?<octal-literal>                   0o \\g<octal-digit> \\g<octal-literal-characters>?
              ){0}
            (?<octal-digit>                     [0-7]
              ){0}
            (?<octal-literal-character>         \\g<octal-digit>
              |                                 _
              ){0}
            (?<octal-literal-characters>        \\g<octal-literal-character> \\g<octal-literal-characters>?
              ){0}

            (?### DECIMAL ###)
            (?<decimal-literal>                 \\g<decimal-digit> \\g<decimal-literal-characters>?
              ){0}
            (?<decimal-digit>                   \\d
              ){0}
            (?<decimal-literal-character>       \\g<decimal-digit>
              |                                 _
              ){0}
            (?<decimal-literal-characters>      \\g<decimal-literal-character> \\g<decimal-literal-characters>?
              ){0}

            (?### HEXADECIMAL ###)
            (?<hexadecimal-literal>             0x \\g<hexadecimal-digit> \\g<hexadecimal-literal-characters>?
              ){0}
            (?<hexadecimal-digit>               \\h
              ){0}
            (?<hexadecimal-literal-character>   \\g<hexadecimal-digit>
              |                                 _
              ){0}
            (?<hexadecimal-literal-characters>  \\g<hexadecimal-literal-character> \\g<hexadecimal-literal-characters>?
              ){0}

            (?### FLOATING POINT ###)
            (?<floating-point-literal>          \\g<decimal-literal>     \\g<decimal-fraction>?     \\g<decimal-exponent>?
              |                                 \\g<hexadecimal-literal> \\g<hexadecimal-fraction>? \\g<hexadecimal-exponent>
              ){0}
            (?<decimal-fraction>                \\. \\g<decimal-literal>
              ){0}
            (?<decimal-exponent>                \\g<floating-point-e> \\g<sign>? \\g<decimal-literal>
              ){0}
            (?<hexadecimal-fraction>            \\. \\g<hexadecimal-literal>?
              ){0}
            (?<hexadecimal-exponent>            \\g<floating-point-p> \\g<sign>? \\g<hexadecimal-literal>
              ){0}
            (?<floating-point-e>                [eE]
              ){0}
            (?<floating-point-p>                [pP]
              ){0}
            (?<sign>                            [+-]
              ){0}
          (?!0[box]) \\g<floating-point-literal>
        |            \\g<integer-literal>
      '
  'literal-string':
    'name': 'string.quoted.double.swift'
    'begin': '"'
    'end': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.swift'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.swift'
    'patterns': [
      {
        'include': '#quoted-text'
      }
    ]
  'operator':
    'patterns': [
        {
          'include': '#operator-character'
        }
      ]
  'operator-character':
    'name': 'keyword.operator.swift'
    'match': '[\\/=\\-+!*%<>&|^~.]'
  'quoted-text':
    'patterns': [
      {
        'name': 'meta.embedded.line.swift'
        'contentName': 'source.swift'
        'begin': '\\\\\\('
        'end': '\\)'
        'beginCaptures':
          '0':
            'name': 'punctuation.section.embedded.begin.swift'
        'endCaptures':
          '0':
            'name': 'punctuation.section.embedded.end.swift'
        'patterns': [
          {
            'include': '$self'
          }
        ]
      }
      {
        'include': '#escaped-char'
      }
    ]
